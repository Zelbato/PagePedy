CREATE TABLE usuario (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    endereco TEXT,
    acesso INT NOT NULL DEFAULT 1
);


CREATE TABLE categoria (
    id_cat INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nome_cat VARCHAR(100) NOT NULL,
    descricao TEXT
);


CREATE TABLE fornecedor (
    id_forn INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nome_forn VARCHAR(100) NOT NULL,
    cnpj VARCHAR(18),
    telefone VARCHAR(20),
    email VARCHAR(100),
    endereco VARCHAR(255)
);


CREATE TABLE materia_prima (
    id_mp INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    forn_id INT,
    nome_mp VARCHAR(90) NOT NULL,
    unidade ENUM('quilograma', 'gramas', 'litros', 'mililitro', 'metro', 'centimetros', 'tempo', 'unidade') NOT NULL DEFAULT 'quilograma',
    tipo_mp ENUM('producao', 'acompanhamento') DEFAULT 'producao', // tipo adicionado
    quantidade DECIMAL(10, 2),
    preco_unitario DECIMAL(10, 2),
    data_compra DATE NOT NULL,
    FOREIGN KEY (forn_id) REFERENCES fornecedor(id_forn)
);


CREATE TABLE produto (
    id_prod INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    img_prod VARCHAR(255),
    categoria_id INT NOT NULL,
    nome_prod VARCHAR(100) NOT NULL,
    preco DECIMAL(10, 2),
    descricao TEXT,
    quantidade_estoque INT DEFAULT 0,
    data_cadastro DATE NOT NULL,
    FOREIGN KEY (categoria_id) REFERENCES categoria(id_cat)
);


CREATE TABLE produto_materiaprima (
    id_prod INT NOT NULL,
    id_mp INT NOT NULL,
    quantidade_materia DECIMAL(10,2),
    PRIMARY KEY (id_prod, id_mp),
    FOREIGN KEY (id_prod) REFERENCES produto(id_prod),
    FOREIGN KEY (id_mp) REFERENCES materia_prima(id_mp)
);


CREATE TABLE producao (
    id_producao INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    produto_id INT NOT NULL,
    quantidade_produzida INT,
    data_producao DATE NOT NULL,
    FOREIGN KEY (produto_id) REFERENCES produto(id_prod)
);


CREATE TABLE producao_materiaprima (
    id_producao INT NOT NULL,
    id_mp INT NOT NULL,
    quantidade_usada DECIMAL(10,2),
    PRIMARY KEY (id_producao, id_mp),
    FOREIGN KEY (id_producao) REFERENCES producao(id_producao),
    FOREIGN KEY (id_mp) REFERENCES materia_prima(id_mp)
);


CREATE TABLE estoque (
    id_estoque INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    estoque_matp_id INT,
    estoque_produto_id INT,
    estoque_tipo ENUM('Matéria Prima', 'Produto') NOT NULL,
    estoque_quantidade INT,
    data_entrada DATE NOT NULL,
    data_saida DATE,
    FOREIGN KEY (estoque_produto_id) REFERENCES produto(id_prod),
    FOREIGN KEY (estoque_matp_id) REFERENCES materia_prima(id_mp)
);


CREATE TABLE despesas (
    id_despesas INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    categoria_despesa ENUM('Fixa','Variável') NOT NULL,
    nome_despesa VARCHAR(50) NOT NULL,
    valor_despesa DECIMAL(10, 2) NOT NULL,
    data_despesa DATE NOT NULL,
    descricao TEXT
);

CREATE TABLE receita (
    id_receita INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    tipo_receita ENUM('Produto', 'Outro') DEFAULT 'Produto',
    descricao_R TEXT,
    data_venda DATE NOT NULL,
    valor_total DECIMAL(10, 2),
    observacao TEXT
);

CREATE TABLE receita_produto (
    id_receita INT NOT NULL,
    id_prod INT NOT NULL,
    quantidade INT NOT NULL,
    preco_venda DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (id_receita, id_prod),
    FOREIGN KEY (id_receita) REFERENCES receita(id_receita),
    FOREIGN KEY (id_prod) REFERENCES produto(id_prod)
);

<------------------------------------------------------------------> 





CREATE TABLE pedido (
    id_pedi INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    data_pedido DATETIME DEFAULT CURRENT_TIMESTAMP,
    status_pedi ENUM('preparando', 'a caminho', 'entregue', 'cancelado') DEFAULT 'preparando',
    valor_total DECIMAL(10, 2) DEFAULT 0.00,
    destino VARCHAR(255),
    observacoes TEXT,
    FOREIGN KEY (usuario_id) REFERENCES usuario(id)
);

CREATE TABLE pedido_produto (
    id_pedi INT NOT NULL,
    id_prod INT NOT NULL,
    quantidade INT NOT NULL DEFAULT 1,
    preco_unitario DECIMAL(10,2) NOT NULL,
    PRIMARY KEY (id_pedi, id_prod),
    FOREIGN KEY (id_pedi) REFERENCES pedido(id_pedi),
    FOREIGN KEY (id_prod) REFERENCES produto(id_prod)
);

CREATE TABLE pedido_materiaprima (
    id_pedi INT NOT NULL,
    id_matepri INT NOT NULL,
    id_prod INT NOT NULL,
    quantidade INT DEFAULT 1,
    PRIMARY KEY (id_pedi, id_matepri, id_prod),
    FOREIGN KEY (id_pedi) REFERENCES pedido(id_pedi),
    FOREIGN KEY (id_matepri) REFERENCES materia_prima(id_mp),
    FOREIGN KEY (id_prod) REFERENCES produto(id_prod)
);









CREATE TABLE pedido_usuario(
    id_pedi INT NOT NULL,
    id_usuario INT NOT NULL,
    quantidade_prod_pedi INT Not NULL,
    status_pedi ENUM ('preparando', 'a caminho', 'entregue', 'cancelado'),
    PRIMARY KEY (id_pedi, id_mp),
    destino,
    FOREIGN KEY (id_pedi) REFERENCES produto(id_pedi),
    FOREIGN KEY (id_usuario) REFERENCES usuario(id)
    
);







<------------------------------------------------------------------------------------------------------------->
CREATE TABLE orcamento (
    id_orc INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    empresa_id INT NOT NULL,
    orc_despesas_id NOT NULL,
    periodo_inicio DATE NOT NULL,
    periodo_fim DATE NOT NULL,
    receita_total DECIMAL(12, 2) DEFAULT 0.00,
    despesa_total DECIMAL(12, 2) DEFAULT 0.00,
    lucro_liquido DECIMAL(12, 2) GENERATED ALWAYS AS (receita_total - despesa_total) STORED,
    valor_a_pagar DECIMAL(12, 2) DEFAULT 0.00,
    status ENUM('Atualizado', 'Em Análise', 'Fechado') DEFAULT 'Atualizado',
    ultima_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (empresa_id) REFERENCES empresa(id_empr),
 );

 orcamento_receita(
    orc_id Int Not NULL,
    orc_receita_id int Not NULL,
    FOREIGN KEY (orc_receita_id) REFERENCES receita(id_receita),
    FOREIGN KEY (orc_id) REFERENCES  orcamento(id_orc)
 );


CREATE TABLE rendimento_produto (
    id_rend_prod INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    rend_prod_id INT NOT NULL,
    quantidade_vendida INT,
    data_venda DATE NOT NULL,
    FOREIGN KEY (rend_prod_id) REFERENCES produto(id_prod)
);
